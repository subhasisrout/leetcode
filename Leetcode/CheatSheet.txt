Cheatsheet
==========
1. Backtracking
	Permutations I & II. 
		if visited then continue. Loop through all elements and backtrack by removing them and setting visited to false.	
		Extra line in Permutation II is :: if (visited[i] || i > 0 && nums[i] == nums[i-1] && !visited[i-1]) continue;

	Subsets I & II (Powerset)
		startIdx is passed. Add to result, no matter what. Loop through all elements and backtrack by removing them.
		Extra line in Subsets II is :: if (i > startIdx && nums[i] == nums[i-1]) continue;

	CombinationSum I & II
		Sort the candidates
		startIdx is passed. Add to result, if targetSum == 0. Loop through all elements and backtrack by removing them. DONT pass i+1 in ComboSum1
		Two things extra in ComboSum2. if (i > startIdx && candidates[i] == candidates[i-1]) continue; ----- Pass i+1 in recursion, as you cannot reuse the same element twice.
		


2. Two pointer / Greedy
	Container with most water
	Boats to save people
	.	
	.<Add more as you see>
	.
		i=0, j=len-1, Compute and either do i++ or j-- or both (as in boats problem).


3. Dynamic Programming
	House Robber I && II
		build dpArray. Use formula - Max(dp[i-1],dp[i-2] + nums[i])
		House Robber II - Do above twice from (0 to second last element) and (1 to last element). Take Max of the two.
		While doing (1 to last element), DO NOT MESS UP THE INDEX for nums. dp[i] = Math.Max(dp[i - 1], dp[i - 2] + nums[i + 1]); //note i+1 for nums. Try to visualize.

	Coin Change 1 and 2. Always initialize dp[] to amount+1 size. This is because dp[0] = 0.

	Longest Increasing SubSequence (LIS)

	Min Costs for Ticket LC 983. dp[] length is maxDate + 1, use set for days, Min of - c1 + c(0), c2 + c(1), c3 + c2(2) - if present in set else dp[i] = dp[i-1]

	Unique Paths 1 and 2. In Unique Paths 1, you do dp[i-1,j] + dp[i, j-1]. In Unique Paths 2, there are 2 differences - 
		diff 1 - while setting dp[] arr for first row and first col, you set 1's until you hit a blocker, then you break (use intuition)
		diff 2 - in the double for loops, you check for obstacle while applying reccurence formula - else set dp[i][j] to 0.


4. Intervals
	Merge Intervals / Merge Overlapping intervals
		Sort by startTime. You either add to result or update the last entry endTime of result.
		Add - If item's start is strictly greater than lastelement's endTime
		ELSE - Update the endtime - Use Math.Max(item's endTime, lastElement endTime)

	Add/Insert Interval
		One naive solution is - Add the newInterval to the list and use "Merge Interval"
		Smart solution (3 flat while loops)
			- add all the intervals before the newInterval starts
			- Merge by setting newIntervalStart and EndTime. Expand the newInterval by updating EndTime and compare newIntervalEndTime in the loop.
			- add all the intervals after the newInterval-MERGED ends

	Non overlapping intervals
		Sort by endTime because you want to greedily pick the intervals which ends soon so as to accomodate more intervals (or remove less intervals)
		Loop through all intervals and update closingTime, if the startTime is >= closingTime, 
		else there is a clash, so increase count.


5. Merge Sort / Merge List category (solved in 1 bunch)
		MergeSortAE.cs  (mid = len/2. left = arr.Take(mid).ToArray()... arr.Skip(mid).ToArray()... In Merge method (i < len1 && j < len2)... then while (arr1) and while (arr2))
		MergeSortedListLC21.cs (Kevin's version)
		MiddleOfLinkedListLC876.cs (using fast/slow/prev ptr. prev.next = null to CUT OFF the list.return slow)
		SortListLC148.cs

6. Bits/Binary
		Number of 1 bits (just refer notes)
		Count the number of bits (just refer notes)


7. Graph / AdjList
			Dictionary<int, List<int>> graph = new Dictionary<int, List<int>>();
			for (int i = 0; i < n; i++)
			{
				graph.Add(i, new List<int>());
			}
            for (int i = 0; i < trust.Length; i++)
            {
                var curr = trust[i];
                
				// Below IF clauses are not needed because of the above for-loop
				// if (!graph.ContainsKey(curr[0])) graph.Add(curr[0], new List<int>());
                // if (!graph.ContainsKey(curr[1])) graph.Add(curr[1], new List<int>()); for bidirectional graph

                graph[curr[0]].Add(curr[1]);
                graph[curr[1]].Add(curr[0]);  // for bidirectional graph
            }



	


		








			